<?php
/**
 * @file
 * Represents hook definition and common methods.
 */

/**
 * Implements hook_menu().
 */
function ding_place2book_migrate_menu() {
  $items = array();

  $items['admin/config/ding/place2book/migrate'] = array(
    'title' => 'Migrate',
    'description' => 'Migrating events to new api.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_place2book_migrate_admin_form'),
    'access arguments' => array('administer place2book settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ding_place2book_migrate.admin.inc',
  );

  return $items;
}

/**
 * Creates a batch for event migration.
 */
function _ding_place2book_migrate_batch($events, &$context) {
  if (empty($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['offset'] = 1;
    $context['sandbox']['max'] = count($events);
  }
  $part = array_slice($events, $context['sandbox']['progress'], 20);
  $context['sandbox']['progress'] += count($part);
  // TODO: Load all nodes at once with node_load_multiple.
  foreach ($part as $event) {
    $node = node_load($event->nid);
    $event_maker_id = _ding_place2book_get_event_maker($node);
    if (!empty($event->place2book_id) && $event->place2book_id != -1) {
      // Using node_save() will invoke our field_presave hook, which will try to
      // update the event in p2b. The event will be migrated, but a lot of
      // errors from p2b will be shown in the UI, because of missing data.
      // Using field_attach_update() on just our field will make Entity
      // reference destroy our OG references (and will also invoke presave).
      // So we opt to update the field data tables directly. This shouldn't be
      // a problem, since we don't want all the normal side effects of saving a
      // field and should also give considerately better performance.
      $values = array(
        'entity_type' => 'node',
        'bundle' => $node->type,
        'entity_id' => $node->nid,
        'revision_id' => $node->vid,
        'language' => LANGUAGE_NONE,
        'delta' => 0,
        'field_place2book_event_id' => $event->place2book_id,
        'field_place2book_event_maker_id' => $event_maker_id,
        'field_place2book_synchronize' => $event->maintain_copy,
      );

      drupal_write_record('field_data_field_place2book', $values);
      drupal_write_record('field_revision_field_place2book', $values);
    }
    $context['message'] = t('Processing: <em>@title</em> (@current/@total).', array(
      '@title' => $node->title,
      '@current' => $context['sandbox']['progress'],
      '@total' => $context['sandbox']['max'],
    ));
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Finish callback for the migration batch operation.
 *
 * @see _ding_place2book_migrate_batch()
 * @see ding_place2book_migrate_admin_form_submit()
 */
function _ding_place2book_migrate_batch_finished($success, $results, $operations) {
  $message = t('Finished with an error.');
  if ($success) {
    // TODO: If success we should make sure field_cache and entity_cache is
    // flushed.
    $message = t('Events migration completed.');
    // Drop table.
    if (db_table_exists('ding_place2book')) {
      db_drop_table('ding_place2book');
    }

    // Disable module.
    module_disable(array('ding_place2book_migrate'), TRUE);
  }

  drupal_set_message($message);
}
